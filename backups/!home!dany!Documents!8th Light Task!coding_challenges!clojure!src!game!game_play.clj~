(ns game.game-play
  "Provides the game play functionality"
  (:require [game.ai :refer :all]
            [game.grid :refer :all]
            [game.menus :refer :all]))

(defrecord Game [menu board score next-input mode icons player-turn notif])

(defn init-board
  "Initialize the board"
  []
  (apply hash-map (interleave (range 9) (repeat :empty))))

(defn init-game
  "Initialize the game"
  []
  (map->Game {:menu (init-main-menu)
              :board (init-board)
              :score {:P1 0 :P2 0}
              :next-input nil
              :mode ""
              :icons nil
              :player-turn nil
              :notif "Welcome to tic-tac-toe by Command Line Games, Inc.! Please select a game mode"}))

(defn computer-move
  "Make a perfect move for the computer"
  [game]
  (let [prompt
        (case (:mode game)
          "HvC" " You're turn"
          "CvC" "")]
    (if (= :continue (game-status game))
      (let [remark (:notif game)]
        (-> game
            (assoc :notif (str remark prompt))
            (move-optimally)))
      game)))

(defn human-move
  "Place the humans icon"
  [game]
  (if (= :continue (game-status game))
    (update game :notif #(str % " " (name (:player-turn game)) "'s turn"))
    game))

(defn next-turn
  "Keep track of who's turn it is"
  [game]
  (let [whose-turn (if (= :P1 (:player-turn game)) :P2 :P1)
        game-next-turn (assoc game :player-turn whose-turn)
        turn-played (case (:mode game-next-turn)
                      "HvH" (human-move game-next-turn)
                      "HvC" (assoc (computer-move game-next-turn) :player-turn :P1)
                      "CvC" (computer-move game-next-turn))]
    (case (game-status turn-played)
      :continue turn-played
      :tie (assoc game-next-turn
                  :menu (end-menu game-next-turn)
                  :notif (format "Tie. Score: P1-%d P2-%d"
                                 (:P1 (:score game-next-turn)) (:P2 (:score game-next-turn))))
      :P1 (let [end-game (update-in game-next-turn [:score :P1] inc)]
            (assoc end-game
             :menu (end-menu game-next-turn)
             :notif (format "P1 Wins. Score: P1-%d P2-%d"
                              (:P1 (:score end-game)) (:P2 (:score end-game)))))
      :P2 (let [end-game (update-in game-next-turn [:score :P2] inc)]
            (assoc end-game
             :menu (end-menu game-next-turn)
             :notif (format "P2 Wins. Score: P1-%d P2-%d"
                            (:P1 (:score end-game)) (:P2 (:score end-game))))))))

(defmulti enter-menu
  "Perform the operation associated with pressing :enter while in a given menu"
  (fn [game] (-> game :menu :page)))

(defmethod enter-menu :main
  [game]
  (assoc game
         :mode (:text (selected-item game))
         :menu (icon-choice-menu game)
         :notif "Is P1 'X' or 'O'?"))

(defmethod enter-menu :icon-choice
  [game]
  (let [choice (:text (selected-item game))
        opponent-icon (if (= choice "X") "O" "X")]
    (assoc game
           :icons {:P1 choice :P2 opponent-icon}
           :menu (turn-choice-menu game)
           :notif (if (not= "CvC" (:mode game))
                    "Who goes first? You're P1, by the way"
                    "Who goes first?"))))

(defmethod enter-menu :turn-choice
  [game]
  (let [new-game (assoc game
                         :player-turn (keyword (:text (selected-item game)))
                         :menu (init-board-menu game)
                         :notif "Let's get started!")
        first-turn-cpu? (or (= "CvC" (:mode new-game))
                            (and (= "HvC" (:mode new-game))
                                 (= :P2 (:player-turn new-game))))]
    (if first-turn-cpu?
      (assoc (computer-move new-game) :player-turn :P1)
      new-game)))

(defmethod enter-menu :end
  [game]
  (if (= "Play again?" (:text (selected-item game)))
    (assoc (init-game)
           :score (:score game)
           :notif "Here we go again...")
    #_(assoc game
           :board (init-board)
           :menu (init-board-menu game)
           :notif "Here we go again...")
    (dissoc game :menu)))

(defmethod enter-menu :game
  [game]
  (if (= "CvC" (:mode game))
    (-> game
        (assoc :notif (rand-nth snarky-remarks))
        (next-turn))
    (let [box-index (selected-index game)
          not-occupied? (empty? (:text (selected-item game)))
          player (:player-turn game)]
      (if not-occupied? 
        (-> game
            (play-move player box-index)
            (assoc :notif (rand-nth snarky-remarks))
            (next-turn))
        game))))

