(def my-list
  [1 2 7 9 2 4 27 3 8 109 384 921 84 81722 94 92 7 4929 48 78 733  98 9 7 7 7 7 6 5 4332 9 2 1])

(defn switch
  "Switch the position of two items in a vector"
  [v i j]
  (assoc v i (v j) j (v i)))

#_(defn join
  "Join an arbitrary number of vectors and elements into a single vector"
  [v &vs])

(defn insert
  "insert an element at a given index"
  [v elem i]
  (apply vector (flatten (vector (subvec v 0 i) elem (subvec v i)))))

(defn change-pos
  "changes the position of the element at index i to index j"
  [v i j]
  (let [elem (v i)]
    (if (< i j)
      (apply vector (flatten (vector (subvec v 0 i)
                                     (subvec v (inc i) (inc j))
                                     elem
                                     (subvec v j))))
      (apply vector (flatten (vector
                              (subvec v 0 j)
                              elem
                              (subvec v j i)
                              (subvec v (inc i))))))))

(defn qsort
  "Quicksort implementation"
  [v]
  (let [pivot (last v)]
    (cond
      (> (count v) 1)
      (->>  (vector ;; TODO Is there a better way to join three vectors?
            (qsort (filter #(< % pivot) v))
            (filter #(= % pivot) v)
            (qsort (filter #(> % (last v)) v)))
           (flatten)
           (apply vector))
      (= 1 (count v))
      pivot
      :else
      [])))

(defn mergesort
  "A Mergesort implementation"
  [v]
  )
